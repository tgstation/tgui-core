@use "../base";
@use "../colors";

@mixin button-color() {
  --button-background: hsl(from var(--color) h s calc(l - var(--adjust-color)));
  cursor: var(--cursor-pointer);
  background-color: var(--button-background);
  color: var(--button-color);
  transition-property: background-color, color, opacity;
  transition-duration: var(--button-transition);
  transition-timing-function: var(--button-transition-timing);
  // Disable selection in buttons
  user-select: none;

  &:hover {
    background-color: hsl(
      from var(--button-background) h s calc(l + var(--adjust-hover))
    );
    color: var(--button-color);
  }

  &:active {
    background-color: hsl(
      from var(--button-background) h s calc(l - var(--adjust-active))
    );
    color: var(--button-color);
    transition: none;
  }
}

@mixin button-color-transparent() {
  --button-background: hsl(from var(--button-color) h s l / 0.1);
  --button-color: var(--button-color-transparent);
  background-color: transparent;

  &:hover {
    --button-color: hsl(from var(--button-color-transparent) h s l / 1);
  }

  &:active {
    opacity: 0.75;
  }

  &.Button--selected {
    --button-color: hsl(from var(--color) h s calc(l + var(--adjust-color)));
  }

  &.Button--disabled {
    --button-background: hsl(from var(--button-color) h s l / 0.2);
    --button-color: var(--color-bad);
    opacity: 1;
    color: var(--button-color) !important;
  }
}

.Button {
  position: relative;
  display: inline-block;
  white-space: nowrap;
  line-height: var(--button-height);
  padding: 0 var(--space-m);
  margin-right: var(--space-xs);
  margin-bottom: var(--space-xs);
  border-radius: var(--button-border-radius);
  outline: none;
  @include button-color();

  &:last-child {
    margin-right: 0;
    margin-bottom: 0;
  }

  &__content {
    display: block;
    align-self: stretch;

    &--ellipsis {
      display: flex; // Inline flex will broke ellipsis, don't change it.
      align-items: center;
    }
  }

  .Button--icon {
    min-width: 1.333em;
    text-align: center;
  }

  &.Button--hasIcon {
    padding-left: 0;

    .Button--icon {
      margin: 0 var(--space-s);
    }
  }

  &--icon-right.Button--hasIcon {
    padding-left: var(--space-m);
    padding-right: var(--space-s);

    .Button--icon {
      margin: 0 0 0 var(--space-s);
    }
  }

  &--empty.Button--hasIcon {
    padding: 0;
  }

  &--compact {
    padding: 0 var(--space-s);
    line-height: 1.333em;

    &.Button--hasIcon .Button--icon {
      margin: 0 var(--space-xxs);
    }
  }

  &--circular {
    border-radius: var(--border-radius-circular);
  }

  &--fluid {
    display: block;
    margin-left: 0;
    margin-right: 0;
  }

  &--ellipsis {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-right: calc(-1 * var(--space-s));
  }

  // We don't need additional margin if button inside stack
  .Stack > &,
  .Stack__item > & {
    margin: 0;
  }
}

@each $color-name, $color-value in colors.$color-map {
  .Button--color--#{$color-name} {
    --color: #{$color-value};
    --button-color: var(--color-white);

    @each $color in colors.$low-contrast-color-map {
      @if $color-name == $color {
        --button-color: var(--color-black);
      }
    }
  }
}

.Button--selected {
  --color: var(--button-background-selected);
}

.Button--disabled {
  cursor: var(--cursor-disabled) !important;
  background-color: var(
    --button-background-disabled,
    var(--button-background)
  ) !important;
  opacity: var(--button-disabled-opacity);
}

.Button--color-- {
  &default {
    --color: var(--button-background-default);
  }

  &caution {
    --color: var(--button-background-caution);
  }

  &danger {
    --color: var(--button-background-danger);
  }

  &transparent {
    @include button-color-transparent();
  }
}

.Button--flex {
  display: inline-flex; // Inline even for fluid
  flex-direction: column;
}

.Button--flex--fluid {
  width: 100%;
}

.Button--verticalAlignContent--top {
  justify-content: flex-start;
}

.Button--verticalAlignContent--middle {
  justify-content: center;
}

.Button--verticalAlignContent--bottom {
  justify-content: flex-end;
}
