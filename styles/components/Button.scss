@use "../base";
@use "../colors";

$bg-map: colors.$color-map !default;
$fg-map: colors.$color-map !default;

$color-default: 0 !default;
$color-selected: 0 !default;
$color-caution: 0 !default;
$color-danger: 0 !default;
$color-transparent-text: 0 !default;
$border-radius: 0 !default;

@mixin button-color($color, $text-color: var(--color-text-fixed-white)) {
  cursor: var(--cursor-pointer);
  background-color: hsl(from $color h s calc(l - var(--adjust-color)));
  color: $text-color;

  &:not(.Button--disabled) {
    &:hover {
      background-color: hsl(
        from $color h s
          calc(calc(l - var(--adjust-color)) + var(--adjust-hover))
      );
      color: $text-color;
    }

    &:active {
      background-color: hsl(
        from $color h s
          calc(calc(l - var(--adjust-color)) - var(--adjust-active))
      );
      color: $text-color;
    }
  }
}

.Button {
  cursor: var(--cursor-pointer);
  position: relative;
  display: inline-block;
  white-space: nowrap;
  line-height: 1.2em;
  /**
   * Non-standard. We subtract the old line-height from the new one,
   * and divide it by 2, so that the height of the button remains the same,
   * but multi-line buttons look normal.
   */
  padding: calc((1.667em - 1.2em) / 2) var(--space-m);
  margin-right: var(--space-xs);
  margin-bottom: var(--space-xs);
  outline: 0;
  border-radius: var(--button-border-radius);
  transition-property: background-color, color, opacity;
  transition-duration: var(--button-transition);
  transition-timing-function: var(--button-transition-timing);
  // Disable selection in buttons
  user-select: none;

  &:active {
    transition: none;
  }

  &:last-child {
    margin-right: 0;
    margin-bottom: 0;
  }

  &__content {
    display: inline-flex;
    align-self: stretch;
    align-items: center;

    &--content {
      flex: 1;
    }

    &--ellipsis {
      display: flex; // Inline flex will broke ellipsis, don't change it.
      align-items: center;
    }

    &.Button__content--icon-right {
      flex-direction: row-reverse;

      .Button--icon {
        margin-left: var(--space-s);
        margin-right: calc(-1 * var(--space-s));
      }
    }

    &--iconFixed {
      width: 100%;
    }
  }

  &--icon {
    margin: 0 calc(-1 * var(--space-s));
    min-width: 1.333em;
    text-align: center;
  }

  &--hasContent {
    .Button--icon {
      margin-right: var(--space-s);
    }

    &.Button--compact .Button--icon {
      margin-right: var(--space-xs);
    }
  }

  &--compact {
    padding: 0 var(--space-s);
    line-height: 1.333em;

    .Button--icon {
      margin: 0 calc(-1 * var(--space-xs));
    }
  }

  &--circular {
    border-radius: var(--border-radius-circular);
  }

  &--fluid {
    display: block;
    margin-left: 0;
    margin-right: 0;
  }

  &--ellipsis {
    display: block;
    text-overflow: ellipsis;
    overflow: hidden;
    margin-right: calc(-1 * var(--space-s));
  }
}

@each $color-name, $color-value in $bg-map {
  .Button--color--#{$color-name} {
    @each $color in colors.$low-contrast-color-map {
      @if $color-name == $color {
        --color-text-fixed-white: var(--color-black);
      }
    }

    @include button-color($color-value);
  }
}

/* Do not move it down, cause it will override selected by specificity */
.Button--color--transparent {
  color: var(--button-color-transparent);

  &:not(.Button--disabled) {
    &:hover {
      background-color: var(--color-hover);
      color: var(--color-text);
    }

    &:active {
      background-color: var(--color-active);
      color: var(--color-text);
    }
  }
}

.Button--color--default {
  @include button-color(var(--button-background-default), var(--button-color));
}

.Button--color--caution {
  @include button-color(var(--button-background-caution));
}

.Button--color--danger {
  @include button-color(var(--button-background-danger));
}

.Button--selected {
  @include button-color(var(--button-background-selected));
}

.Button--disabled {
  cursor: var(--cursor-disabled);
  opacity: 0.5;
}

.Button--flex {
  display: inline-flex; //Inline even for fluid
  flex-direction: column;
}

.Button--flex--fluid {
  width: 100%;
}

.Button--verticalAlignContent--top {
  justify-content: flex-start;
}

.Button--verticalAlignContent--middle {
  justify-content: center;
}

.Button--verticalAlignContent--bottom {
  justify-content: flex-end;
}
