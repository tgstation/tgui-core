@use "../colors";

$bg-map: colors.$color-map !default;

@mixin button-style($color) {
  background-color: hsl(
    from $color h s calc(l - var(--adjust-color) * 2) /
      var(--imagebutton-transparecy)
  );
  border: var(--border-thickness-tiny) solid
    hsl(
      from $color h s calc(l + var(--adjust-color)) /
        var(--imagebutton-transparecy)
    );

  &:not(.ImageButton--disabled, .ImageButton--noAction) {
    .ImageButton__container {
      cursor: var(--cursor-pointer);
    }

    &:hover {
      background-color: hsl(
        from $color h s calc(l - var(--adjust-color) + var(--adjust-hover)) /
          var(--imagebutton-transparecy)
      );
    }

    &:active {
      box-shadow: inset var(--shadow-glow-small) hsl(from $color h s l / 0.5);
      transition-duration: 0s;
    }

    /* Disable hover/active effects if hovered on buttons container */
    &:hover,
    &:active {
      &:has(.ImageButton__buttons:hover),
      &:has(.ImageButton__buttons:active) {
        background-color: hsl(
          from $color h s calc(l - var(--adjust-color) * 2) /
            var(--imagebutton-transparecy)
        );
        box-shadow: none;
      }
    }
  }

  /* Make non-fluid content opaque */
  &:not(.ImageButton--fluid) .ImageButton__content {
    background-color: hsl(from $color h s calc(l - var(--adjust-hover)));
    border-top: var(--border-thickness-tiny) solid $color;
  }
}

@each $color-name, $color-value in $bg-map {
  .ImageButton__color--#{$color-name} {
    @include button-style($color-value);
  }
}

.ImageButton__color--default {
  @include button-style(hsl(from var(--color-base) h s 30));
}

.ImageButton__color--primary {
  @include button-style(hsl(from var(--color-primary) h s 30));
}

.ImageButton__color--transparent {
  @include button-style(hsl(from var(--color-base) h s 30));

  background-color: transparent;
  border-color: transparent !important;

  .ImageButton__content {
    background-color: transparent !important;
    color: var(--color-text-translucent);
    border-color: transparent !important;
  }

  &:hover:not(.ImageButton--disabled) .ImageButton__content {
    color: var(--color-text);
  }
}

.ImageButton--selected {
  @include button-style(var(--button-background-selected));
}

.ImageButton--disabled {
  .ImageButton__container {
    cursor: var(--cursor-disabled);
    opacity: 0.5;
  }

  &.ImageButton--fluid {
    filter: contrast(75%);

    .ImageButton__buttons {
      filter: contrast(125%);
    }
  }
}

.ImageButton {
  overflow: hidden;
  user-select: none;
  position: relative;
  display: inline-flex;
  text-align: center;
  margin: 0.25em;
  border-radius: var(--border-radius-medium);
  transition-property: background-color, border-color, box-shadow;
  transition-duration: var(--transition-time-medium);
  border-width: 0;

  &__container {
    display: flex;
    flex-direction: column;
    transition: opacity var(--transition-time-medium);
    border-color: inherit;
  }

  &__image {
    position: relative;
    align-self: center;
    pointer-events: none;
    overflow: hidden;
    line-height: 0;
    padding: var(--space-s);
    border: var(--border-thickness-tiny) solid;
    border-bottom: none;
    border-color: inherit;
    border-radius: var(--border-radius-medium) var(--border-radius-medium) 0 0;
  }

  &__content {
    user-select: none;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 0.25em 0.33em;
    z-index: 2;
  }

  &__buttons {
    display: flex;
    position: absolute;
    overflow: hidden;
    left: var(--border-thickness-tiny);
    bottom: 1.8em;
    max-width: 100%;
    z-index: 1;

    &--alt {
      overflow: visible;
      flex-direction: column;
      pointer-events: none;
      top: var(--border-thickness-tiny);
      bottom: unset !important;
      /** Text outline. Sort of. */
      text-shadow:
        0px 1px 2px var(--color-base),
        -1px 0px 2px var(--color-base),
        1px 0px 2px var(--color-base),
        0px -1px 2px var(--color-base);
    }

    &--empty {
      bottom: 0;
      left: 0;
    }

    & > * {
      /* I know !important is bad, but here's no other way */
      margin: 0 !important;
      padding: 0 !important;
      border-radius: 0 !important;
    }
  }

  &--empty {
    border-width: var(--border-thickness-tiny);

    .ImageButton__image {
      border: none;
      border-radius: var(--border-radius-medium);
    }
  }

  .Stack > &,
  .Stack__item > & {
    margin: 0;
  }
}

.ImageButton--fluid {
  display: flex;
  flex-direction: row;
  margin: 0 0 0.33em 0;
  border-width: var(--border-thickness-tiny);

  &:last-child {
    margin-bottom: 0;
  }

  .ImageButton {
    &__container {
      flex-direction: row;
      flex: 1;
    }

    &__image {
      padding: 0;
      border: 0;
    }

    &__content {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      white-space: normal;
      padding: 0;
      margin: 0 0.5em;
      color: var(--color-text);

      &--title {
        font-weight: bold;
        padding: 0.5em;
      }

      &--divider {
        border-bottom: var(--border-thickness-small) solid var(--color-border);
      }

      &--text {
        padding: 0.5em;
      }
    }

    &__buttons {
      position: relative;
      left: inherit;
      bottom: inherit;
      background-color: inherit;

      &--alt {
        pointer-events: all;
        top: inherit;
        text-shadow: none;

        & > * {
          border-top: 1px solid hsla(0, 0%, 100%, 0.075);

          &:first-child {
            border-top: 0;
          }
        }
      }

      & > * {
        display: inline-flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
        white-space: pre-wrap;
        line-height: 1.15em;
        height: 100%;
        border-left: var(--border-thickness-tiny) solid var(--color-border);
      }
    }
  }
}
