@use "../colors";

.ImageButton {
  overflow: hidden;
  user-select: none;
  position: relative;
  display: inline-flex;
  text-align: center;
  margin: 0.25em;
  background-color: hsl(
    from var(--imagebutton-color) h s calc(l - var(--adjust-color) * 2) /
      var(--imagebutton-transparecy)
  );
  border: var(--border-thickness-tiny) solid
    hsl(
      from var(--imagebutton-color) h s calc(l + var(--adjust-color)) /
        var(--imagebutton-transparecy)
    );
  border-radius: var(--border-radius-medium);
  transition-property: background-color, border-color, box-shadow;
  transition-duration: var(--transition-time-medium);
  border-width: 0;

  &:not(.ImageButton--disabled, .ImageButton--noAction) {
    .ImageButton__container {
      cursor: var(--cursor-pointer);
    }

    &:not(
       /* Prevent hover/active effects if hovered/pressed on buttons container */
        :has(.ImageButton__buttons:hover),
        :has(.ImageButton__buttons:active)
      ) {
      &:hover {
        background-color: hsl(
          from var(--imagebutton-color) h s
            calc(l - var(--adjust-color) + var(--adjust-hover)) /
            var(--imagebutton-transparecy)
        );
      }

      &:active .ImageButton__image {
        filter: drop-shadow(var(--shadow-glow-small) var(--imagebutton-color));
        transition-duration: 0s;
      }
    }
  }

  /* Make non-fluid content opaque */
  &:not(.ImageButton--fluid) .ImageButton__content {
    background-color: hsl(
      from var(--imagebutton-color) h s calc(l - var(--adjust-hover))
    );
    border-top: var(--border-thickness-tiny) solid var(--imagebutton-color);
  }

  &__container {
    display: flex;
    flex-direction: column;
    border-color: inherit;
    transition: opacity var(--transition-time-medium);
  }

  &__image {
    pointer-events: none;
    overflow: hidden;
    position: relative;
    align-self: center;
    line-height: 0;
    padding: var(--space-s);
    border: var(--border-thickness-tiny) solid;
    border-bottom: none;
    border-color: inherit;
    border-radius: var(--border-radius-medium) var(--border-radius-medium) 0 0;
    transition: filter var(--transition-time-slow);

    &--fallback {
      text-align: center;
      align-content: center;
      color: var(--color-text-translucent);

      &:before {
        display: table;
        width: 100%;
        zoom: 0.75;
      }
    }
  }

  &__content {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    padding: 0.25em 0.33em;
    color: var(--color-text-fixed-white);
    z-index: 2;
  }

  &__buttons {
    overflow: hidden;
    position: absolute;
    display: flex;
    left: var(--border-thickness-tiny);
    bottom: 1.8em;
    max-width: 100%;
    z-index: 1;

    &--alt {
      overflow: visible;
      flex-direction: column;
      pointer-events: none;
      top: var(--border-thickness-tiny);
      bottom: unset !important;
      /** Text outline. Sort of. */
      text-shadow:
        0px 1px 2px var(--color-base),
        -1px 0px 2px var(--color-base),
        1px 0px 2px var(--color-base),
        0px -1px 2px var(--color-base);
    }

    &--empty {
      bottom: 0;
      left: 0;
    }

    & > * {
      /* I know !important is bad, but here's no other way */
      margin: 0 !important;
      padding: 0 !important;
      border-radius: 0 !important;
    }
  }

  &--empty {
    border-width: var(--border-thickness-tiny);

    .ImageButton__image {
      border: none;
      border-radius: var(--border-radius-medium);
    }
  }

  .Stack > &,
  .Stack__item > & {
    margin: 0;
  }
}

// MARK: Fluid
.ImageButton--fluid {
  display: flex;
  flex-direction: row;
  margin: 0 0 0.33em 0;
  border-width: var(--border-thickness-tiny);

  &:last-child {
    margin-bottom: 0;
  }

  .ImageButton {
    &__container {
      flex-direction: row;
      flex: 1;
    }

    &__image {
      padding: 0;
      border: 0;
    }

    &__content {
      flex: 1;
      display: flex;
      flex-direction: column;
      justify-content: center;
      white-space: normal;
      padding: 0;
      margin: 0 0.5em;
      color: var(--color-text);

      &--title {
        font-weight: bold;
        padding: 0.5em;
      }

      &--divider {
        border-bottom: var(--border-thickness-small) solid var(--color-border);
      }

      &--text {
        padding: 0.5em;
      }
    }

    &__buttons {
      position: relative;
      left: inherit;
      bottom: inherit;
      background-color: inherit;

      &--alt {
        pointer-events: all;
        top: inherit;
        text-shadow: none;

        & > * {
          border-top: 1px solid hsla(0, 0%, 100%, 0.075);

          &:first-child {
            border-top: 0;
          }
        }
      }

      & > * {
        display: inline-flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
        white-space: pre-wrap;
        line-height: 1.15em;
        height: 100%;
        border-left: var(--border-thickness-tiny) solid var(--color-border);
      }
    }
  }
}

// MARK: Colors
@each $color-name, $color-value in colors.$color-map {
  .ImageButton__color--#{$color-name} {
    --imagebutton-color: #{$color-value};

    @each $color in colors.$low-contrast-color-map {
      @if $color-name == $color {
        --color-text-fixed-white: var(--color-black);
      }
    }
  }
}

// I hate this
.ImageButton__color--transparent {
  --imagebutton-color: var(--color-text-translucent-light);
  --imagebutton-transparecy: 0.1;
  background-color: transparent;
  border-color: transparent !important;

  .ImageButton__content {
    background-color: transparent !important;
    color: var(--color-text-translucent-light);
    border-color: transparent !important;
  }

  &.ImageButton--disabled {
    background-color: hsL(from var(--color-red) h s l / 0.15) !important;
  }

  &.ImageButton--selected {
    background-color: hsL(from var(--color-good) h s l / 0.15);
  }
}

.ImageButton__color--default {
  --imagebutton-color: hsl(from var(--color-base) h s 30);
}

.ImageButton__color--primary {
  --imagebutton-color: hsl(from var(--color-primary) h s l);
}

.ImageButton--selected {
  --imagebutton-color: hsl(
    from var(--button-background-selected) h s calc(l * 1.15)
  );
  --color-text-fixed-white: var(--color-white);
}

.ImageButton--disabled {
  .ImageButton__container {
    cursor: var(--cursor-disabled);
    opacity: 0.5;
  }

  &.ImageButton--fluid {
    filter: contrast(75%);

    .ImageButton__buttons {
      filter: contrast(125%);
    }
  }
}
