@use "../colors";

@mixin indicator($position) {
  position: relative;
  padding-#{$position}: var(--tab-indicator-size);

  &:before {
    content: "";
    position: absolute;
    #{$position}: 0;
    background-color: currentColor;
    transition: transform var(--tab-transition);
  }

  @if $position == bottom or $position == top {
    &:before {
      width: 100%;
      height: var(--tab-indicator-size);
      transform: scaleX(0);
    }

    &--selected:before {
      transform: scaleX(0.99999) !important;
    }
  }

  @if $position == left or $position == right {
    &:before {
      width: var(--tab-indicator-size);
      height: 100%;
      transform: scaleY(0);
    }

    &--selected:before {
      transform: scaleY(0.99999) !important;
    }
  }
}

.Tabs {
  position: relative;
  display: flex;
  align-items: stretch;
  overflow: hidden;
  background-color: var(--tabs-container-background);
}

.Tabs--fill {
  height: 100%;
}

.Tabs--vertical {
  flex-direction: column;
  padding: var(--space-s) 0 var(--space-s) var(--space-s);
}

.Tabs--horizontal {
  margin-bottom: var(--space-m);
  padding: var(--space-s) var(--space-s) 0;

  &:last-child {
    margin-bottom: 0;
  }
}

.Tabs__Tab {
  flex-grow: 0;
}

.Tabs--fluid .Tabs__Tab {
  flex-grow: 1;
}

.Tab {
  user-select: none;
  cursor: var(--cursor-pointer);
  display: flex;
  align-items: center;
  justify-content: space-between;
  background-color: var(--tab-background);
  color: var(--tab-color);
  min-height: 2.25em;
  min-width: 4em;
  transition-property: background-color, color;
  transition-duration: var(--tab-transition);

  &:not(.Tab--selected) {
    &:hover {
      background-color: var(--tab-background-hover);
    }

    &:active {
      color: var(--tab-color-selected);
    }
  }

  &--selected {
    cursor: var(--cursor-default);
    background-color: var(--tab-background-selected);
    color: var(--tab-color-selected);
  }
}

.Tab .Tab__text {
  flex-grow: 1;
  margin: 0 var(--space-m);
}

.Tab__left {
  min-width: 1.5em;
  text-align: center;
  margin-left: var(--space-s);
}

.Tab__right {
  min-width: 1.5em;
  text-align: center;
  margin-right: var(--space-s);
}

.Tabs--horizontal {
  .Tab {
    border-top-left-radius: var(--tab-border-radius);
    border-top-right-radius: var(--tab-border-radius);
    @include indicator(bottom);
  }
}

.Tabs--vertical {
  .Tab {
    min-height: 2em;
    border-top-left-radius: var(--tab-border-radius);
    border-bottom-left-radius: var(--tab-border-radius);
    @include indicator(right);
  }
}

.Tabs--scrollable {
  --mask-width: 3.25rem;
  --mask-left: 0rem;
  --mask-right: 0rem;

  &-content {
    overflow: auto;
    scrollbar-width: none;
    overscroll-behavior: none;
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    mask-image: linear-gradient(
      90deg,
      transparent calc(var(--mask-left) * 0.5),
      black calc(0% + var(--mask-left)),
      black calc(100% - var(--mask-right)),
      transparent calc(100% - calc(var(--mask-right) * 0.5))
    );

    &.scrollable-left.scrollable-right {
      --mask-left: var(--mask-width);
      --mask-right: var(--mask-width);
    }

    &.scrollable-left {
      --mask-left: var(--mask-width);
    }

    &.scrollable-right {
      --mask-right: var(--mask-width);
    }
  }

  .scroll-left,
  .scroll-right {
    position: absolute;
    align-content: center;
    top: 0;
    height: 100%;
    margin: none;
    border-radius: unset;
    z-index: 1;
  }

  .scroll-left {
    left: 0;
  }

  .scroll-right {
    right: 0;
  }

  .Tab {
    flex-shrink: 0;
  }
}

@each $color-name, $color-value in colors.$color-map {
  .Tab--selected.Tab--color--#{$color-name} {
    color: hsl(from $color-value h s calc(l + 17.5));
  }
}

// Interoperability with sections
.Section .Tabs {
  background-color: transparent;
}

.Section:not(.Section--fitted) .Tabs {
  margin: 0 calc(-1 * var(--space-m)) var(--space-m);

  &:first-child {
    margin-top: calc(-1 * var(--space-m));
  }
}
